#!/usr/bin/env node

var fse = require('fs-extra'),
    download = require('download-git-repo'),
    program = require('commander'),
    exists = require('fs').existsSync,
    inquirer = require('inquirer'),
    chalk = require('chalk'),
    ora = require('ora'),
    rm = require('rimraf').sync,
    path = require('path'),
    logger = require('../lib/logger');

//框架地址+框架类型
var repositoryPath = 'gitlab:gitlab.kongfz.com:widget/pio-project-init',
    LocalPath = process.cwd()  + '/pio-project-init',
    projectList = [
      'nodejs',
      'vuejs'
    ];
//项目初始化交互的问题
const promptList = [
  {
    type: 'input',
    message: '请输入项目名称:',
    name: 'name',
    default: "pio_project_init" // 默认值
  },
  {
    type: 'list',
    message: '请选择项目类型:',
    name: 'type',
    choices: [
      'nodejs',
      'vuejs'
    ]
  }
];

/**
 * Usage.
 */

program.usage('<type>');

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:');
  console.log(chalk.gray('    #创建新的项目,并且初始化项目类型'));
  console.log('    $ zi init');
});

/**
 * type.
 */
program.on('--type', function () {
  console.log('  Examples:');
  console.log(chalk.gray('    #type类型包括'));
  console.log('    # type:nodejs,vuejs');
});

/**
 * Help.
 */
function help () {
  program.parse(process.argv);
  inquirer.prompt(promptList).then(answers => {
      console.log(answers); // 返回的结果
      run(answers);
  });
  return false;
}
help();

/**
 * [filterFunc description]
 * @param  {[type]} src  [description]
 * @param  {[type]} dest [description]
 * @return {[type]}      [description]
 */
const filterFunc = (src, dest) => {
  var regExp =/(node_modules(.*?)|\.git)$/;
  return !src.match(regExp);
};

/**
 * run
 * @param type
 */
function run(answers){
  var spinner = ora('downloading ');
  spinner.start();
  if (exists(LocalPath)) rm(LocalPath);
  var url = repositoryPath+answers.type + '/';
  console.log(repositoryPath);
  download(repositoryPath, LocalPath, { clone: true }, function(err){
    spinner.stop();
    if (err) {
      logger.fatal('Failed to download kfz-project-init: ' + err.message.trim());
    }else{
      fse.copy(LocalPath,process.cwd(),{ filter: filterFunc }, err => {
        if (err) return logger.fatal('Generated project error: ' + err.message.trim());
        fse.removeSync(LocalPath);
        logger.success('Generated project success!');
      });
    }
  });
}
